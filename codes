
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentInfo {
    address public owner;
    uint256 public studentIdNumber;
    uint256 public studentGradeLevel;
    uint256 public studentAge;

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can call this function");
        _;
    }

    function setStudentId(uint256 _idNumber) public onlyOwner {
        require(_idNumber == 170223, "Wrong student number, please input the right student number");
        studentIdNumber = _idNumber;
    }

    function setGradeLevel(uint256 _level) public onlyOwner {
        require(_level == 10, "Wrong year level, please input the right grade level.");
        studentGradeLevel = _level;
    }

    function setStudentAge(uint256 _age) public onlyOwner {
        require(_age == 20, "Wrong age, please input the right age for this student.");
        studentAge = _age;
    }

    function doubleStudentAge() public onlyOwner {
        // Assert that doubling the age does not cause an overflow
        uint256 newAge = studentAge * 2;
        assert(newAge > studentAge);
        studentAge = newAge;
    }

    function withdrawAge(uint256 _age) public onlyOwner {
        require(_age > 1, "Invalid age to withdraw.");
        if (_age > studentAge) {
            revert("Not enough age to withdraw.");
        }
        studentAge -= _age;
    }

    function getStudentInfo() public view returns (uint256, uint256, uint256) {
        return (studentIdNumber, studentGradeLevel, studentAge);
    }
}
